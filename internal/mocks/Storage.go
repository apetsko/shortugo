// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/apetsko/shortugo/internal/models"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Storage) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Storage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Storage_Expecter) Close() *Storage_Close_Call {
	return &Storage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Storage_Close_Call) Run(run func()) *Storage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storage_Close_Call) Return(_a0 error) *Storage_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_Close_Call) RunAndReturn(run func() error) *Storage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserURLs provides a mock function with given fields: ctx, IDs, userID
func (_m *Storage) DeleteUserURLs(ctx context.Context, IDs []string, userID string) error {
	ret := _m.Called(ctx, IDs, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserURLs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) error); ok {
		r0 = rf(ctx, IDs, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_DeleteUserURLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserURLs'
type Storage_DeleteUserURLs_Call struct {
	*mock.Call
}

// DeleteUserURLs is a helper method to define mock.On call
//   - ctx context.Context
//   - IDs []string
//   - userID string
func (_e *Storage_Expecter) DeleteUserURLs(ctx interface{}, IDs interface{}, userID interface{}) *Storage_DeleteUserURLs_Call {
	return &Storage_DeleteUserURLs_Call{Call: _e.mock.On("DeleteUserURLs", ctx, IDs, userID)}
}

func (_c *Storage_DeleteUserURLs_Call) Run(run func(ctx context.Context, IDs []string, userID string)) *Storage_DeleteUserURLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(string))
	})
	return _c
}

func (_c *Storage_DeleteUserURLs_Call) Return(err error) *Storage_DeleteUserURLs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Storage_DeleteUserURLs_Call) RunAndReturn(run func(context.Context, []string, string) error) *Storage_DeleteUserURLs_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *Storage) Get(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Storage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Storage_Expecter) Get(ctx interface{}, id interface{}) *Storage_Get_Call {
	return &Storage_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *Storage_Get_Call) Run(run func(ctx context.Context, id string)) *Storage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_Get_Call) Return(url string, err error) *Storage_Get_Call {
	_c.Call.Return(url, err)
	return _c
}

func (_c *Storage_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Storage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// ListLinksByUserID provides a mock function with given fields: ctx, baseURL, userID
func (_m *Storage) ListLinksByUserID(ctx context.Context, baseURL string, userID string) ([]models.URLRecord, error) {
	ret := _m.Called(ctx, baseURL, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListLinksByUserID")
	}

	var r0 []models.URLRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]models.URLRecord, error)); ok {
		return rf(ctx, baseURL, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []models.URLRecord); ok {
		r0 = rf(ctx, baseURL, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.URLRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, baseURL, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_ListLinksByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLinksByUserID'
type Storage_ListLinksByUserID_Call struct {
	*mock.Call
}

// ListLinksByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - baseURL string
//   - userID string
func (_e *Storage_Expecter) ListLinksByUserID(ctx interface{}, baseURL interface{}, userID interface{}) *Storage_ListLinksByUserID_Call {
	return &Storage_ListLinksByUserID_Call{Call: _e.mock.On("ListLinksByUserID", ctx, baseURL, userID)}
}

func (_c *Storage_ListLinksByUserID_Call) Run(run func(ctx context.Context, baseURL string, userID string)) *Storage_ListLinksByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Storage_ListLinksByUserID_Call) Return(rr []models.URLRecord, err error) *Storage_ListLinksByUserID_Call {
	_c.Call.Return(rr, err)
	return _c
}

func (_c *Storage_ListLinksByUserID_Call) RunAndReturn(run func(context.Context, string, string) ([]models.URLRecord, error)) *Storage_ListLinksByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with no fields
func (_m *Storage) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Storage_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *Storage_Expecter) Ping() *Storage_Ping_Call {
	return &Storage_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *Storage_Ping_Call) Run(run func()) *Storage_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storage_Ping_Call) Return(_a0 error) *Storage_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_Ping_Call) RunAndReturn(run func() error) *Storage_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, r
func (_m *Storage) Put(ctx context.Context, r models.URLRecord) error {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.URLRecord) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type Storage_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - r models.URLRecord
func (_e *Storage_Expecter) Put(ctx interface{}, r interface{}) *Storage_Put_Call {
	return &Storage_Put_Call{Call: _e.mock.On("Put", ctx, r)}
}

func (_c *Storage_Put_Call) Run(run func(ctx context.Context, r models.URLRecord)) *Storage_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.URLRecord))
	})
	return _c
}

func (_c *Storage_Put_Call) Return(_a0 error) *Storage_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_Put_Call) RunAndReturn(run func(context.Context, models.URLRecord) error) *Storage_Put_Call {
	_c.Call.Return(run)
	return _c
}

// PutBatch provides a mock function with given fields: ctx, rr
func (_m *Storage) PutBatch(ctx context.Context, rr []models.URLRecord) error {
	ret := _m.Called(ctx, rr)

	if len(ret) == 0 {
		panic("no return value specified for PutBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.URLRecord) error); ok {
		r0 = rf(ctx, rr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_PutBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutBatch'
type Storage_PutBatch_Call struct {
	*mock.Call
}

// PutBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - rr []models.URLRecord
func (_e *Storage_Expecter) PutBatch(ctx interface{}, rr interface{}) *Storage_PutBatch_Call {
	return &Storage_PutBatch_Call{Call: _e.mock.On("PutBatch", ctx, rr)}
}

func (_c *Storage_PutBatch_Call) Run(run func(ctx context.Context, rr []models.URLRecord)) *Storage_PutBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.URLRecord))
	})
	return _c
}

func (_c *Storage_PutBatch_Call) Return(_a0 error) *Storage_PutBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_PutBatch_Call) RunAndReturn(run func(context.Context, []models.URLRecord) error) *Storage_PutBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Stats provides a mock function with given fields: ctx
func (_m *Storage) Stats(ctx context.Context) (*models.Stats, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 *models.Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.Stats, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.Stats); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Stats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type Storage_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Storage_Expecter) Stats(ctx interface{}) *Storage_Stats_Call {
	return &Storage_Stats_Call{Call: _e.mock.On("Stats", ctx)}
}

func (_c *Storage_Stats_Call) Run(run func(ctx context.Context)) *Storage_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Storage_Stats_Call) Return(_a0 *models.Stats, _a1 error) *Storage_Stats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_Stats_Call) RunAndReturn(run func(context.Context) (*models.Stats, error)) *Storage_Stats_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
